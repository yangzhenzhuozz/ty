function init(){
    system.LoadLibrary("system_net",{[
        "system_net_ip2longNative",
        "system_net_createServerSocket",
        "system_net_listen",
        "system_net_accept",
        "system_net_send",
        "system_net_read",
        "system_net_getSocketAddress",
        "system_net_getSocketPort",
        "system_net_getSocketFamily",
        "system_net_createSocket",
        "system_net_connect",
        "system_net_close"
    ]});
};
class IPAddress{
    var host:long;
    var port:short;
    var family:short;
    var _point:object;//原始socket
    IPAddress(host:long,port:short,family:short){
        this.host=host;
        this.port=port;
        this.family=family;
    }
    IPAddress(host:string,port:short,family:short){
        this.host=ip2long(host);
        this.port=port;
        this.family=family;
    }

    function toString():string{
        var a=host&255l;
        var b=(host>>8)&255l;
        var c=(host>>16)&255l;
        var d=(host>>24)&255l;
        var ip=a.toString()+"."+b.toString()+"."+c.toString()+"."+d.toString();
        return "ip:"+ip+",port:"+port.toString();
    };
}
class Socket{
    var socket:object;
    var address:IPAddress;
    Socket(address:IPAddress){
        this.address=address;
        this.socket = createSocket();
        if(socket==null){
            throw "创建Socket失败";
        }
    }
    Socket(s:object){
        socket=s;
    }
    function connect(){
        var code = system.net.connect(socket,address.host,address.port,address.family);
        if(code!=0){
            throw "connect失败";
        }
    };
    function sendString(msg:string):int{
        return send(msg.buffer);
    };
    function send(buf:byte[]):int{
        return system.net.send(socket,buf);
    };
    function read(buf:byte[]):int{
        return system.net.read(socket,buf);
    };
    function close(){
        system.net.close(socket);
    };
    function unwinded(){
        close();
    };
}
class ServerSocket{
    var host:long;
    var port:short;
    var _socket:object;
    ServerSocket(host:string,port:short){
        this.host=ip2long(host);
        this.port=port;
        _socket=createServerSocket(this.host,port);
        if(_socket==null){
            throw "创建ServerSocket失败";
        }
    }
    function listen(len:int):void{
        var ret=system.net.listen(_socket,len);
        if(ret!=0){
            throw "listen失败";
        }
    };
    function accept():Socket{
        var fd=system.net.accept(_socket);
        if(fd==null){
            throw "accept失败";
        }
        var clientSocket = new Socket(fd);
        var ipAddress=new IPAddress(
            getSocketAddress(fd),
            getSocketPort(fd),
            getSocketFamily(fd)
        );
        clientSocket.address=ipAddress;
        return clientSocket;
    };
    function close(){
        system.net.close(_socket);
    };
    function unwinded(){
        close();
    };
}

function close(_socket:object):object{
    native
};

function accept(_socket:object):object{
    native
};

function listen(_socket:object,len:int):int{
    native
};

function send(_socket:object,buffer:byte[]):int{
    native
};

function read(_socket:object,buffer:byte[]):int{
    native
};

function createServerSocket(host:long,port:short):object{
    native
};

function createSocket():object{
    native
};

function connect(socket:object,host:long,port:short,family:short):int{
    native
};

function getSocketAddress(_socket:object):long{
    native
};

function getSocketPort(_socket:object):short{
    native
};

function getSocketFamily(_socket:object):short{
    native
};

function ip2long(host:string):long{
    var ret=ip2longNative(host.buffer);
    if(ret==-1l){
        throw "无效的ip地址:"+host;
    }
    return ret;
};

//实在懒得写解析ip的代码了，用c++的算了
function ip2longNative(buffer:byte[]):long{
    native
};