/*这是预留的函数,先执行system.init之后才会执行main函数,以后需要加什么初始化代码可以放到这里*/
function init(){
    system.console.init();
    system.dispatcher.init();

    var mainThread=new system.dispatcher.thread();
    mainThread.name="main";
    setCurrentThread(mainThread);
};

/*VM内置函数,用于加载dll文件*/
function loadLibrary(fileName:byte[],functionNames:byte[][]):void{
    native
};

/*VM内置函数，用于创建新线程*/
function fork(fun:()=>void):void{
    native
};

/*VM内置函数，用于阻塞线程*/
function yield():void{
    native
};

/*VM内置函数，设置当前线程*/
function getCurrentThread():system.dispatcher.thread{
    native
};

/*VM内置函数，获取当前线程*/
function setCurrentThread(thread:system.dispatcher.thread):void{
    native
};

//下面几种类型是魔法类,里面的的操作符重载、构造函数等都是由编译器特殊处理
/*
1.源码中的"abc"会被编译器处理成byte数组,并构造一个string
2.另外几种类型的操作符不再是函数调用,仅仅起到参数类型检查的功能
比如int类型的operator +，编译器会检查+号两边的参数类型是否合法,然后直接生成i32_add指令,这种很明显不可能再被处理成函数调用,否则就无限套娃了
3.object不是一种真实存在的类型,可以理解成一个指针,只能用于类型转换,而且类型转换的时候编译器也会加魔法,比如"(object)1"这句代码会在堆区申请一个int32大小的空间,然后把1复制到这里去,可以理解为装箱
  ty的拆装箱都是显式的,没有类似java代码"Object a=1;"的隐式拆装箱
*/

class string{
    var buffer:byte[];
    string(arg:byte[]){
        this.buffer=arg;
    }
    operator + ( b : string ) : string { 
        var newBuffer=new byte[this.buffer.length+b.buffer.length];
        for(var i=0;i<this.buffer.length;i++){
            newBuffer[i]=this.buffer[i];
        }
        for(var i=0;i<b.buffer.length;i++){
            newBuffer[this.buffer.length+i]=b.buffer[i];
        }
        return new string(newBuffer);
    };
}

valuetype class bool{
     operator == ( v : bool ) : bool { native } ;
     operator != ( v : bool ) : bool { native } ;
     operator || ( v : bool ) : bool { native } ;
     operator && ( v : bool ) : bool { native } ;
     operator ! () : bool { native } ;
}

valuetype class byte{
    operator ^ ( v : byte ) : byte { native } ;
    operator & ( v : byte ) : byte { native } ;
    operator | ( v : byte ) : byte { native } ;
    operator << ( v : int ) : byte { native } ;
    operator >> ( v : int ) : byte { native } ;
    operator ~ () : byte { native } ;
    operator % ( v : byte ) : byte { native } ;
    operator + ( v : byte ) : byte { native } ;
    operator - ( v : byte ) : byte { native } ;
    operator * ( v : byte ) : byte { native } ;
    operator / ( v : byte ) : byte { native } ;
    operator ++ () : void { native } ;
    operator -- () : void { native } ;
    operator < ( v : byte ) : bool { native } ;
    operator <= ( v : byte ) : bool { native } ;
    operator > ( v : byte ) : bool { native } ;
    operator >= ( v : byte ) : bool { native } ;
    operator == ( v : byte ) : bool { native } ;
    operator != ( v : byte ) : bool { native } ;
}

valuetype class short{
    operator ^ ( v : short ) : short { native } ;
    operator & ( v : short ) : short { native } ;
    operator | ( v : short ) : short { native } ;
    operator << ( v : int ) : short { native } ;
    operator >> ( v : int ) : short { native } ;
    operator ~ () : short { native } ;
    operator % ( v : short ) : short { native } ;
    operator + ( v : short ) : short { native } ;
    operator - ( v : short ) : short { native } ;
    operator * ( v : short ) : short { native } ;
    operator / ( v : short ) : short { native } ;
    operator ++ () : void { native } ;
    operator -- () : void { native } ;
    operator < ( v : short ) : bool { native } ;
    operator <= ( v : short ) : bool { native } ;
    operator > ( v : short ) : bool { native } ;
    operator >= ( v : short ) : bool { native } ;
    operator == ( v : short ) : bool { native } ;
    operator != ( v : short ) : bool { native } ;
}

valuetype class int{
    operator ^ ( v : int ) : int { native } ;
    operator & ( v : int ) : int { native } ;
    operator | ( v : int ) : int { native } ;
    operator << ( v : int ) : int { native } ;
    operator >> ( v : int ) : int { native } ;
    operator ~ () : int { native } ;
    operator % ( v : int ) : int { native } ;
    operator + ( v : int ) : int { native } ;
    operator - ( v : int ) : int { native } ;
    operator * ( v : int ) : int { native } ;
    operator / ( v : int ) : int { native } ;
    operator ++ () : void { native } ;
    operator -- () : void { native } ;
    operator < ( v : int ) : bool { native } ;
    operator <= ( v : int ) : bool { native } ;
    operator > ( v : int ) : bool { native } ;
    operator >= ( v : int ) : bool { native } ;
    operator == ( v : int ) : bool { native } ;
    operator != ( v : int ) : bool { native } ;
}

valuetype class long{
    operator ^ ( v : long ) : long { native } ;
    operator & ( v : long ) : long { native } ;
    operator | ( v : long ) : long { native } ;
    operator << ( v : int ) : long { native } ;
    operator >> ( v : int ) : long { native } ;
    operator ~ () : long { native } ;
    operator % ( v : long ) : long { native } ;
    operator + ( v : long ) : long { native } ;
    operator - ( v : long ) : long { native } ;
    operator * ( v : long ) : long { native } ;
    operator / ( v : long ) : long { native } ;
    operator ++ () : void { native } ;
    operator -- () : void { native } ;
    operator < ( v : long ) : bool { native } ;
    operator <= ( v : long ) : bool { native } ;
    operator > ( v : long ) : bool { native } ;
    operator >= ( v : long ) : bool { native } ;
    operator == ( v : long ) : bool { native } ;
    operator != ( v : long ) : bool { native } ;
}

valuetype class double{
    operator + ( v : double ) : double { native } ;
    operator - ( v : double ) : double { native } ;
    operator * ( v : double ) : double { native } ;
    operator / ( v : double ) : double { native } ;
    operator ++ () : void { native } ;
    operator -- () : void { native } ;
    operator < ( v : double ) : bool { native } ;
    operator <= ( v : double ) : bool { native } ;
    operator > ( v : double ) : bool { native } ;
    operator >= ( v : double ) : bool { native } ;
    operator == ( v : double ) : bool { native } ;
    operator != ( v : double ) : bool { native } ;
}

valuetype class object{}