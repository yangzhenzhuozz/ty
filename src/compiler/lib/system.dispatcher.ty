function init(){
    system.loadLibrary("system_dispatcher".buffer,{[
        "system_dispatcher_generateMutex".buffer,
        "system_dispatcher_mutexLock".buffer,
        "system_dispatcher_mutexUnlock".buffer
    ]});
};

class Mutex{
    var _mutex:object;
    Mutex(){
        _mutex=generateMutex();
    }
    function lock(){
        mutexLock(_mutex);
    };
    function unlock(){
        mutexUnlock(_mutex);
    };
}
function generateMutex():object{
    native
};
function mutexLock(_mutex:object):void{
    native
};
function mutexUnlock(_mutex:object):void{
    native
};
class thread{
    var task:()=>void;
    var _name:string;
    get name():string{
        return _name;
    };
    set name(v:string){
        _name=v;
    };
    thread(t:()=>void){
        this.task=t;
    }
    thread(){
    }
    function start(){
        if((object)task==null){
            throw "the task of thread is null";
        }else{
            system.fork(()=>{
                system.setCurrentThread(this);
                task();
            });
        }
    };
}