var a=123;
class test<T>
{
    var v:T=a;
    test(){}
}
class test2
{
    var v:int=a;
    test2(){}
}
//扩展函数测试
extension function toString(this int value):string{
    var tmp=value;
    if(tmp<0){
        tmp=-tmp;
    }
    var len=1;
    for(;;){
        tmp=tmp/10;
        if(tmp==0){
            break;
        }
        len++;
    }
    tmp=value;
    var buffer=new byte[tmp<0?len+1:len];
    if(tmp<0){
        buffer[0]='-';
        tmp=-tmp;
    }
    var sign=value;
    for(var i=0;i<len;i++){
        buffer[sign<0?len-i:len-i-1]=(byte)(tmp%10)+'0';
        tmp=tmp/10;
    }
    return new string(buffer);
}

extension function toString(this long value):string{
    var tmp=value;
    if(tmp<0l){
        tmp=-tmp;
    }
    var len=1l;
    for(;;){
        tmp=tmp/10l;
        if(tmp==0l){
            break;
        }
        len++;
    }
    tmp=value;
    var buffer=new byte[(int)(tmp<0l?len+1l:len)];
    if(tmp<0l){
        buffer[0]='-';
        tmp=-tmp;
    }
    var sign=value;
    for(var i=0l;i<len;i++){
        buffer[(int)(sign<0l?len-i:len-i-1l)]=(byte)(tmp%10l)+'0';
        tmp=tmp/10l;
    }
    return new string(buffer);
}

extension function toString(this short value):string{
    var tmp=value;
    if(tmp<0s){
        tmp=-tmp;
    }
    var len=1s;
    for(;;){
        tmp=tmp/10s;
        if(tmp==0s){
            break;
        }
        len++;
    }
    tmp=value;
    var buffer=new byte[(int)(tmp<0s?len+1s:len)];
    if(tmp<0s){
        buffer[0]='-';
        tmp=-tmp;
    }
    var sign=value;
    for(var i=0s;i<len;i++){
        buffer[(int)(sign<0s?len-i:len-i-1s)]=(byte)(tmp%10s)+'0';
        tmp=tmp/10s;
    }
    return new string(buffer);
}