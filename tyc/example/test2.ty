var tmpClass=new test1.MyClass<int>();
var id:system.int=5;
class MyClass1{
    MyClass1(){
        if(id==6){
            throw "abc";
        }
        id++;
    }
    function unwinded():void{
        printString("there is unwinded");
    };
}
function main():void{
    system._VMLoadNativeLib("d:\\Users\\john\\Desktop\\ty\\dll\\x64\\Debug\\dll".buffer,{["test2_NativePrintBytesString".buffer]});
    autounwinding(var a:MyClass1=new MyClass1();var b:MyClass1=new MyClass1()){}
};

function tmp<T>(v:T){
    return v.toString();
};

function printString(s:string){//comment a
    NativePrintBytesString(s.buffer);
};

function NativePrintBytesString(arg:byte[]):void{
    native
};


extension function toString(this int value):string{
    var tmp=value;
    var baseCode="0".buffer[0];
    if(tmp<0){
        tmp=-tmp;
    }
    var len=1;
    for(;;){
        tmp=tmp/10;
        if(tmp==0){
            break;
        }
        len++;
    }
    tmp=value;
    var buffer=new byte[tmp<0?len+1:len];
    if(tmp<0){
        buffer[0]="-".buffer[0];
        tmp=-tmp;
    }
    var sign=value;
    for(var i=0;i<len;i++){
        buffer[sign<0?len-i:len-i-1]=(byte)(tmp%10)+baseCode;
        tmp=tmp/10;
    }
    return new string(buffer);
}